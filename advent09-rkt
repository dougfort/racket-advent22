#lang racket

;; Â™

(require "advent09-data.rkt")
(require "advent09-rope.rkt")

(module+ test
  (require rackunit))

(define (rope-journey moves)
  (define rope (make-rope))
  (define db (make-hash (list (cons (rope-tail rope) #t))))
  (for/fold ([rope rope]
              [db db]
              #:result db)
             ([move (in-list moves)])
    (let ([next-rope (move-rope rope move)])
      (hash-set! db (rope-tail rope) #t)
      (values next-rope db))))
